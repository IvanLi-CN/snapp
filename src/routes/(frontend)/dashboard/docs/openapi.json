{
  "openapi": "3.0.0",
  "info": {
    "title": "Snapp.li API",
    "version": "1.0.0",
    "description": "Discover the power of Snapp, your self-hostable URL shortening service. Effortlessly shorten links, and with Snapp's self-hosting capability, you have complete control. Create concise, shareable links on your terms with Snapp's user-friendly platform.\n",
    "x-logo": {
      "url": "https://labs.snapp.li/logo.svg",
      "backgroundColor": "#1d273b",
      "altText": "Snapp.li"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/urania-dev/snapp/blob/main/LICENSE.md"
    }
  },
  "servers": [
    {
      "url": "https://labs.snapp.li/api",
      "description": "Rest Api Interface"
    }
  ],
  "tags": [
    {
      "name": "snapps",
      "description": "Short URLs entity",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://labs.snapp.li"
      }
    },
    {
      "name": "users",
      "description": "Snapp users",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://labs.snapp.li"
      }
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/snapps": {
      "get": {
        "tags": [
          "snapps"
        ],
        "summary": "Retrieve a list of Snapps",
        "description": "Retrieves a list of Snapps based on provided query parameters.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 8
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search query for short codes or original URLs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Sorting direction (asc or desc)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "Total count of Snapps"
                    },
                    "page": {
                      "type": "integer",
                      "description": "Page number"
                    },
                    "limit": {
                      "type": "integer",
                      "description": "Number of items per page"
                    },
                    "sort": {
                      "type": "string",
                      "description": "Field to sort by"
                    },
                    "sortDirection": {
                      "type": "string",
                      "description": "Sorting direction (asc or desc)"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Snapp"
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "snapps"
        ],
        "summary": "Create a new Snapp",
        "description": "Creates a new Snapp with the provided details.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NewSnapp"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snapp"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "snapps"
        ],
        "summary": "Update an existing Snapp",
        "description": "Updates an existing Snapp with the provided details.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EditSnapp"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snapp"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "snapps"
        ],
        "summary": "Delete Snapps",
        "description": "Deletes one or more Snapps based on the provided IDs.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "A Snapp IDs to delete",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Comma-separated list of Snapp IDs to delete",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "new-owner-id",
            "in": "query",
            "description": "User id of who will inherit the snapps",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deleted_ids": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "description": "List of deleted Snapp IDs"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Retrieve a list of users",
        "description": "Retrieves a list of users based on provided query parameters.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 8
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search query for username or email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sorting direction (asc or desc)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "Total count of users"
                    },
                    "page": {
                      "type": "integer",
                      "description": "Page number"
                    },
                    "limit": {
                      "type": "integer",
                      "description": "Number of items per page"
                    },
                    "sort": {
                      "type": "string",
                      "description": "Field to sort by"
                    },
                    "sortDirection": {
                      "type": "string",
                      "description": "Sorting direction (asc or desc)"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a new user",
        "description": "Creates a new user with the provided details.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "patch": {
        "summary": "Update an existing user",
        "tags": [
          "users"
        ],
        "description": "Updates an existing user with the provided details.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete users",
        "description": "Deletes one or more users based on the provided IDs.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "A Snapp IDs to delete",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deleted_ids": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "description": "List of deleted user IDs"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "Unauthorized": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "example": {
              "message": "You are not authorized to perform this action."
            }
          }
        }
      },
      "UnprocessableEntity": {
        "description": "Unprocessable entity error",
        "content": {
          "application/json": {
            "example": {
              "message": "One or more parameters are invalid."
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "Too many requests error",
        "content": {
          "application/json": {
            "example": {
              "message": "Too many requests. Please try again later."
            }
          }
        }
      },
      "ServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "example": {
              "message": "An unexpected server error occurred. Please try again later."
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad request error",
        "content": {
          "application/json": {
            "example": {
              "message": "One or more request parameters are missing or invalid."
            }
          }
        }
      },
      "NotFound": {
        "description": "Not found error",
        "content": {
          "application/json": {
            "example": {
              "message": "The requested resource was not found."
            }
          }
        }
      }
    },
    "schemas": {
      "Snapp": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Snapp ID"
          },
          "original_url": {
            "type": "string",
            "description": "Original URL of the Snapp"
          },
          "short_code": {
            "type": "string",
            "description": "Short code associated with the Snapp"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of Snapp creation"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp for the Snapp (optional)"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "User ID associated with the Snapp"
          }
        }
      },
      "NewSnapp": {
        "type": "object",
        "properties": {
          "original_url": {
            "type": "string",
            "description": "Original URL to be shortened",
            "example": "https://example.com/page"
          },
          "shortcode": {
            "type": "string",
            "description": "Custom short code (optional)",
            "example": "custom123"
          },
          "secret": {
            "type": "string",
            "description": "Secret key for accessing the Snapp (optional)",
            "example": "secretpassword"
          },
          "max_usages": {
            "type": "integer",
            "description": "Maximum number of usages allowed (optional)",
            "example": 10
          },
          "ttl": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration date and time for the Snapp (optional)",
            "example": "2024-02-28T23:59:59Z"
          },
          "user_id": {
            "type": "string",
            "description": "User ID associated with the Snapp (optional)",
            "example": "user123"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes or comments (optional)",
            "example": "This is a test Snapp"
          }
        }
      },
      "EditSnapp": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the Snapp to update",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "original_url": {
            "type": "string",
            "description": "New original URL to be updated (optional)",
            "example": "https://newexample.com/page"
          },
          "shortcode": {
            "type": "string",
            "description": "New custom short code (optional)",
            "example": "newcustom123"
          },
          "secret": {
            "type": "string",
            "description": "New secret key for accessing the Snapp (optional)",
            "example": "newsecretpassword"
          },
          "max_usages": {
            "type": "integer",
            "description": "New maximum number of usages allowed (optional)",
            "example": 20
          },
          "ttl": {
            "type": "string",
            "format": "date-time",
            "description": "New expiration date and time for the Snapp (optional)",
            "example": "2024-03-15T23:59:59Z"
          },
          "notes": {
            "type": "string",
            "description": "New additional notes or comments (optional)",
            "example": "This is an updated Snapp"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "User ID"
          },
          "username": {
            "type": "string",
            "description": "Username of the user"
          },
          "email": {
            "type": "string",
            "description": "Email address of the user"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of user creation"
          },
          "notes":{
            "type":"string",
            "description":"Admin only visible notes on the user"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Roles assigned to the user"
          }
        }
      },
      "NewUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username of the new user"
          },
          "email": {
            "type": "string",
            "description": "Email address of the new user"
          },
          "password": {
            "type": "string",
            "description": "Password of the new user"
          },
          "confirm_password": {
            "type": "string",
            "description": "Confirm password of the new user"
          }
        }
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user to update"
          },
          "username": {
            "type": "string",
            "description": "New username of the user"
          },
          "email": {
            "type": "string",
            "description": "New email address of the user"
          },
          "password": {
            "type": "string",
            "description": "New password of the user"
          },
          "notes": {
            "type": "string",
            "description": "New notes or comments for the user"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "New roles assigned to the user"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}